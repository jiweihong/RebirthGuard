
/********************************************
*											*
*	RebirthGuard/crpyto.cpp - chztbby		*
*											*
********************************************/

#include "RebirthGuard.h"
#include "AES.h"

BYTE* Source = NULL;
HANDLE hFile = NULL;
DWORD Length;

CONST BYTE IV[] = { 0x88, 0xCA, 0x61, 0xAF, 0xFF, 0x05, 0x0D, 0x96, 0x8F, 0x12, 0x27, 0xD0, 0x8B, 0xEC, 0x25, 0xE8 };
CONST BYTE Key[] = { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C };

CONST BYTE EncryptedAPI_0[] = { 0xE3, 0xD9, 0xEE, 0xDF, 0xC8, 0xCC, 0xD9, 0xC8, 0xFE, 0xC8, 0xCE, 0xD9, 0xC4, 0xC2, 0xC3, 0xAD, }; // NtCreateSection
CONST BYTE EncryptedAPI_1[] = { 0xE3, 0xD9, 0xE0, 0xCC, 0xDD, 0xFB, 0xC4, 0xC8, 0xDA, 0xE2, 0xCB, 0xFE, 0xC8, 0xCE, 0xD9, 0xC4, 0xC2, 0xC3, 0xAD, }; // NtMapViewOfSection
CONST BYTE EncryptedAPI_2[] = { 0xE3, 0xD9, 0xF8, 0xC3, 0xC0, 0xCC, 0xDD, 0xFB, 0xC4, 0xC8, 0xDA, 0xE2, 0xCB, 0xFE, 0xC8, 0xCE, 0xD9, 0xC4, 0xC2, 0xC3, 0xAD, }; // NtUnmapViewOfSection
CONST BYTE EncryptedAPI_3[] = { 0xE3, 0xD9, 0xFD, 0xDF, 0xC2, 0xD9, 0xC8, 0xCE, 0xD9, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtProtectVirtualMemory
CONST BYTE EncryptedAPI_4[] = { 0xE3, 0xD9, 0xFC, 0xD8, 0xC8, 0xDF, 0xD4, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtQueryVirtualMemory
CONST BYTE EncryptedAPI_5[] = { 0xE3, 0xD9, 0xE1, 0xC2, 0xCE, 0xC6, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtLockVirtualMemory
CONST BYTE EncryptedAPI_6[] = { 0xE3, 0xD9, 0xFF, 0xC8, 0xCC, 0xC9, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtReadVirtualMemory
CONST BYTE EncryptedAPI_7[] = { 0xE3, 0xD9, 0xFC, 0xD8, 0xC8, 0xDF, 0xD4, 0xE4, 0xC3, 0xCB, 0xC2, 0xDF, 0xC0, 0xCC, 0xD9, 0xC4, 0xC2, 0xC3, 0xFD, 0xDF, 0xC2, 0xCE, 0xC8, 0xDE, 0xDE, 0xAD, }; // NtQueryInformationProcess
CONST BYTE EncryptedAPI_8[] = { 0xE3, 0xD9, 0xFE, 0xC8, 0xD9, 0xE4, 0xC3, 0xCB, 0xC2, 0xDF, 0xC0, 0xCC, 0xD9, 0xC4, 0xC2, 0xC3, 0xF9, 0xC5, 0xDF, 0xC8, 0xCC, 0xC9, 0xAD, }; // NtSetInformationThread
CONST BYTE EncryptedAPI_9[] = { 0xE3, 0xD9, 0xF9, 0xC8, 0xDF, 0xC0, 0xC4, 0xC3, 0xCC, 0xD9, 0xC8, 0xFD, 0xDF, 0xC2, 0xCE, 0xC8, 0xDE, 0xDE, 0xAD, }; // NtTerminateProcess
CONST BYTE EncryptedAPI_10[] = { 0xE3, 0xD9, 0xFF, 0xC8, 0xDE, 0xD8, 0xC0, 0xC8, 0xFD, 0xDF, 0xC2, 0xCE, 0xC8, 0xDE, 0xDE, 0xAD, }; // NtResumeProcess
CONST BYTE EncryptedAPI_11[] = { 0xE3, 0xD9, 0xEE, 0xDF, 0xC8, 0xCC, 0xD9, 0xC8, 0xF9, 0xC5, 0xDF, 0xC8, 0xCC, 0xC9, 0xE8, 0xD5, 0xAD, }; // NtCreateThreadEx	
CONST BYTE EncryptedAPI_12[] = { 0xE3, 0xD9, 0xF9, 0xC8, 0xDF, 0xC0, 0xC4, 0xC3, 0xCC, 0xD9, 0xC8, 0xF9, 0xC5, 0xDF, 0xC8, 0xCC, 0xC9, 0xAD, }; // NtTerminateThread
CONST BYTE EncryptedAPI_13[] = { 0xFF, 0xD9, 0xC1, 0xEC, 0xC9, 0xC9, 0xFB, 0xC8, 0xCE, 0xD9, 0xC2, 0xDF, 0xC8, 0xC9, 0xE8, 0xD5, 0xCE, 0xC8, 0xDD, 0xD9, 0xC4, 0xC2, 0xC3, 0xE5, 0xCC, 0xC3, 0xC9, 0xC1, 0xC8, 0xDF, 0xAD, }; // RtlAddVectoredExceptionHandler
CONST BYTE EncryptedAPI_14[] = { 0xE1, 0xC9, 0xDF, 0xFF, 0xC8, 0xCA, 0xC4, 0xDE, 0xD9, 0xC8, 0xDF, 0xE9, 0xC1, 0xC1, 0xE3, 0xC2, 0xD9, 0xC4, 0xCB, 0xC4, 0xCE, 0xCC, 0xD9, 0xC4, 0xC2, 0xC3, 0xAD, }; // LdrRegisterDllNotification
CONST BYTE EncryptedAPI_15[] = { 0xE1, 0xC2, 0xCC, 0xC9, 0xE1, 0xC4, 0xCF, 0xDF, 0xCC, 0xDF, 0xD4, 0xEC, 0xAD, }; // LoadLibraryA 
CONST BYTE EncryptedAPI_16[] = { 0xE1, 0xC2, 0xCC, 0xC9, 0xE1, 0xC4, 0xCF, 0xDF, 0xCC, 0xDF, 0xD4, 0xFA, 0xAD, }; // LoadLibraryW
CONST BYTE EncryptedAPI_17[] = { 0xE1, 0xC2, 0xCC, 0xC9, 0xE1, 0xC4, 0xCF, 0xDF, 0xCC, 0xDF, 0xD4, 0xE8, 0xD5, 0xEC, 0xAD, }; // LoadLibraryExA
CONST BYTE EncryptedAPI_18[] = { 0xE1, 0xC2, 0xCC, 0xC9, 0xE1, 0xC4, 0xCF, 0xDF, 0xCC, 0xDF, 0xD4, 0xE8, 0xD5, 0xFA, 0xAD, }; // LoadLibraryExW
CONST BYTE EncryptedAPI_19[] = { 0xE1, 0xC9, 0xDF, 0xE1, 0xC2, 0xCC, 0xC9, 0xE9, 0xC1, 0xC1, 0xAD, }; // LdrLoadDll
CONST BYTE EncryptedAPI_20[] = { 0xFF, 0xD9, 0xC1, 0xF8, 0xDE, 0xC8, 0xDF, 0xF9, 0xC5, 0xDF, 0xC8, 0xCC, 0xC9, 0xFE, 0xD9, 0xCC, 0xDF, 0xD9, 0xAD, }; // RtlUserThreadStart
CONST BYTE EncryptedAPI_21[] = { 0xE3, 0xD9, 0xFC, 0xD8, 0xC8, 0xDF, 0xD4, 0xE4, 0xC3, 0xCB, 0xC2, 0xDF, 0xC0, 0xCC, 0xD9, 0xC4, 0xC2, 0xC3, 0xF9, 0xC5, 0xDF, 0xC8, 0xCC, 0xC9, 0xAD, }; // NtQueryInformationThread
CONST BYTE EncryptedAPI_22[] = { 0xFF, 0xD9, 0xC1, 0xEC, 0xCE, 0xDC, 0xD8, 0xC4, 0xDF, 0xC8, 0xFD, 0xDF, 0xC4, 0xDB, 0xC4, 0xC1, 0xC8, 0xCA, 0xC8, 0xAD, }; // RtlAcquirePrivilege
CONST BYTE EncryptedAPI_23[] = { 0xE3, 0xD9, 0xFE, 0xC8, 0xD9, 0xE4, 0xC3, 0xCB, 0xC2, 0xDF, 0xC0, 0xCC, 0xD9, 0xC4, 0xC2, 0xC3, 0xFD, 0xDF, 0xC2, 0xCE, 0xC8, 0xDE, 0xDE, 0xAD, }; // NtSetInformationProcess
CONST BYTE EncryptedAPI_24[] = { 0xFF, 0xD9, 0xC1, 0xFF, 0xC8, 0xC1, 0xC8, 0xCC, 0xDE, 0xC8, 0xFD, 0xDF, 0xC4, 0xDB, 0xC4, 0xC1, 0xC8, 0xCA, 0xC8, 0xAD, }; // RtlReleasePrivilege
CONST BYTE EncryptedAPI_25[] = { 0xE3, 0xD9, 0xFA, 0xDF, 0xC4, 0xD9, 0xC8, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtWriteVirtualMemory
CONST BYTE EncryptedAPI_26[] = { 0xE3, 0xD9, 0xEC, 0xC1, 0xC1, 0xC2, 0xCE, 0xCC, 0xD9, 0xC8, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtAllocateVirtualMemory
CONST BYTE EncryptedAPI_27[] = { 0xE3, 0xD9, 0xEB, 0xDF, 0xC8, 0xC8, 0xFB, 0xC4, 0xDF, 0xD9, 0xD8, 0xCC, 0xC1, 0xE0, 0xC8, 0xC0, 0xC2, 0xDF, 0xD4, 0xAD, }; // NtFreeVirtualMemory

CONST BYTE* CryptAPI[]
{
	EncryptedAPI_0, EncryptedAPI_1,	EncryptedAPI_2,	EncryptedAPI_3,	EncryptedAPI_4,	EncryptedAPI_5,	EncryptedAPI_6,	EncryptedAPI_7,	EncryptedAPI_8,	EncryptedAPI_9,
	EncryptedAPI_10,EncryptedAPI_11,EncryptedAPI_12,EncryptedAPI_13,EncryptedAPI_14,EncryptedAPI_15,EncryptedAPI_16,EncryptedAPI_17,EncryptedAPI_18,EncryptedAPI_19,
	EncryptedAPI_20,EncryptedAPI_21,EncryptedAPI_22,EncryptedAPI_23,EncryptedAPI_24,EncryptedAPI_25,EncryptedAPI_26,EncryptedAPI_27
};

//-----------------------------------------------------------
//	Read 'RebirthGuard.ini' and decrypt to buffer by AES128.
//-----------------------------------------------------------
VOID DecryptFileToMem(BYTE* Buffer)
{
	if (Source == NULL)
	{
		hFile = CreateFile(IniPath, FILE_READ_DATA, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

		Length = PADDING(GetFileSize(hFile, 0), 16);

		Source = (BYTE*)malloc(Length);
		memset(Buffer, 0, Length);

		ReadFile(hFile, Source, Length, NULL, NULL);
		CloseHandle(hFile);
	}

	AES_CBC_Decrypt(Buffer, Source, Length, Key, IV);
}

//-------------------------------------------------------
//	Decrypt buffer to buffer by XOR.
//-------------------------------------------------------
VOID DecryptMem(CHAR* Buffer, SIZE_T API)
{
	if (API >= sizeof(CryptAPI) / sizeof(SIZE_T))
		Detected(CURRENT_PROCESS, NULL, APICALL_Invalid_API, (PVOID)API, (PVOID)0);

	SIZE_T Len = 0;
	for (SIZE_T j = 0; Len == 0; j++)
		if (CryptAPI[API][j] == 0xAD)
			Len = j + 1;

	memcpy(Buffer, CryptAPI[API], Len);

	for (SIZE_T i = 0; i < Len; i++)
		Buffer[i] ^= 173;
}
